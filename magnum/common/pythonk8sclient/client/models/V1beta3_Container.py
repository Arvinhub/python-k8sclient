#!/usr/bin/env python
"""
Copyright 2015 Reverb Technologies, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

class V1beta3_Container(object):
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually."""


    def __init__(self):
        """
        Attributes:
          swaggerTypes (dict): The key is attribute name and the value is attribute type.
          attributeMap (dict): The key is attribute name and the value is json key in definition.
        """
        self.swaggerTypes = {
            
            'args': 'list[str]',
            
            
            'capabilities': 'v1beta3_Capabilities',
            
            
            'command': 'list[str]',
            
            
            'env': 'list[v1beta3_EnvVar]',
            
            
            'image': 'str',
            
            
            'imagePullPolicy': 'str',
            
            
            'lifecycle': 'v1beta3_Lifecycle',
            
            
            'livenessProbe': 'v1beta3_Probe',
            
            
            'name': 'str',
            
            
            'ports': 'list[v1beta3_ContainerPort]',
            
            
            'privileged': 'bool',
            
            
            'readinessProbe': 'v1beta3_Probe',
            
            
            'resources': 'v1beta3_ResourceRequirements',
            
            
            'terminationMessagePath': 'str',
            
            
            'volumeMounts': 'list[v1beta3_VolumeMount]',
            
            
            'workingDir': 'str'
            
        }

        self.attributeMap = {
            
            'args': 'args',
            
            'capabilities': 'capabilities',
            
            'command': 'command',
            
            'env': 'env',
            
            'image': 'image',
            
            'imagePullPolicy': 'imagePullPolicy',
            
            'lifecycle': 'lifecycle',
            
            'livenessProbe': 'livenessProbe',
            
            'name': 'name',
            
            'ports': 'ports',
            
            'privileged': 'privileged',
            
            'readinessProbe': 'readinessProbe',
            
            'resources': 'resources',
            
            'terminationMessagePath': 'terminationMessagePath',
            
            'volumeMounts': 'volumeMounts',
            
            'workingDir': 'workingDir'
            
        }       

        
        #command array; the docker image&#39;s cmd is used if this is not provided; arguments to the entrypoint; cannot be updated
        
        self.args = None # list[str]
        
        #capabilities for container; cannot be updated
        
        self.capabilities = None # v1beta3_Capabilities
        
        #entrypoint array; not executed within a shell; the docker image&#39;s entrypoint is used if this is not provided; cannot be updated
        
        self.command = None # list[str]
        
        #list of environment variables to set in the container; cannot be updated
        
        self.env = None # list[v1beta3_EnvVar]
        
        #Docker image name
        
        self.image = None # str
        
        #image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise; cannot be updated
        
        self.imagePullPolicy = None # str
        
        #actions that the management system should take in response to container lifecycle events; cannot be updated
        
        self.lifecycle = None # v1beta3_Lifecycle
        
        #periodic probe of container liveness; container will be restarted if the probe fails; cannot be updated
        
        self.livenessProbe = None # v1beta3_Probe
        
        #name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated
        
        self.name = None # str
        
        #list of ports to expose from the container; cannot be updated
        
        self.ports = None # list[v1beta3_ContainerPort]
        
        #whether or not the container is granted privileged status; defaults to false; cannot be updated
        
        self.privileged = None # bool
        
        #periodic probe of container service readiness; container will be removed from service endpoints if the probe fails; cannot be updated
        
        self.readinessProbe = None # v1beta3_Probe
        
        #Compute Resources required by this container; cannot be updated
        
        self.resources = None # v1beta3_ResourceRequirements
        
        #path at which the file to which the container&#39;s termination message will be written is mounted into the container&#39;s filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log; cannot be updated
        
        self.terminationMessagePath = None # str
        
        #pod volumes to mount into the container&#39;s filesyste; cannot be updated
        
        self.volumeMounts = None # list[v1beta3_VolumeMount]
        
        #container&#39;s working directory; defaults to image&#39;s default; cannot be updated
        
        self.workingDir = None # str
        
